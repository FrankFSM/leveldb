// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <cstddef>

#include "leveldb/export.h"

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.
enum CompressionType {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  kNoCompression = 0x0,
  kSnappyCompression = 0x1,
  kZstdCompression = 0x2,
};

// Options to control the behavior of a database (passed to DB::Open)
struct LEVELDB_EXPORT Options {
  // Create an Options object with default values for all fields.
  Options();

  // 一个比较器对象，用于比较数据库中的键。默认情况下，LevelDB使用字典序比较器。你可以提供自定义的比较器以支持其他排序顺序。
  // -------------------
  // Parameters that affect behavior

  // Comparator used to define the order of keys in the table.
  // Default: a comparator that uses lexicographic byte-wise ordering
  //
  // REQUIRES: The client must ensure that the comparator supplied
  // here has the same name and orders keys *exactly* the same as the
  // comparator provided to previous open calls on the same DB.
  const Comparator* comparator;

  // 一个布尔值，表示在打开数据库时，如果数据库不存在，则创建一个新的数据库。默认值为`false`
  // If true, the database will be created if it is missing.
  bool create_if_missing = false;

  // 一个布尔值，表示在打开数据库时，如果数据库已存在，则返回错误。默认值为`false`。
  // If true, an error is raised if the database already exists.
  bool error_if_exists = false;

  // 一个布尔值，表示是否启用一些额外的检查，以确保数据的一致性。这可能会影响性能。默认值为`false`。
  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.
  bool paranoid_checks = false;

  // 一个`Env`对象，用于指定数据库的环境。默认情况下，LevelDB使用操作系统的文件系统和时钟。你可以提供自定义的环境以支持其他平台或存储后端
  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  Env* env;

  // 一个`Logger`对象，用于输出日志信息。默认情况下，LevelDB不输出日志。你可以提供自定义的日志器以记录日志信息。
  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-null, or to a file stored
  // in the same directory as the DB contents if info_log is null.
  Logger* info_log = nullptr;

  // 一个整数，表示MemTable的大小。当MemTable的大小超过此值时，LevelDB将其转换为一个不可变的只读MemTable，并创建一个新的可写MemTable。默认值为4MB。
  // -------------------
  // Parameters that affect performance

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  //
  // Larger values increase performance, especially during bulk loads.
  // Up to two write buffers may be held in memory at the same time,
  // so you may wish to adjust this parameter to control memory usage.
  // Also, a larger write buffer will result in a longer recovery time
  // the next time the database is opened.
  size_t write_buffer_size = 4 * 1024 * 1024;

  // 一个整数，表示LevelDB可以同时打开的最大文件数。默认值为1000。
  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set (budget
  // one open file per 2MB of working set).
  int max_open_files = 1000;

  // 一个`Cache`对象，表示用于存储SSTable中的数据块的缓存。默认情况下，LevelDB使用一个LRU缓存。你可以提供自定义的缓存以支持其他缓存策略。
  // Control over blocks (user data is stored in a set of blocks, and
  // a block is the unit of reading from disk).

  // If non-null, use the specified cache for blocks.
  // If null, leveldb will automatically create and use an 8MB internal cache.
  Cache* block_cache = nullptr;

  // 一个整数，表示SSTable中数据块的大小。较大的块大小可以提高压缩比，但可能会降低查询性能。默认值为4KB。
  // Approximate size of user data packed per block.  Note that the
  // block size specified here corresponds to uncompressed data.  The
  // actual size of the unit read from disk may be smaller if
  // compression is enabled.  This parameter can be changed dynamically.
  size_t block_size = 4 * 1024;

  // 一个整数，表示SSTable中数据块的重启点间隔。较小的间隔可以提高查询性能，但可能会降低压缩比。默认值为16。
  // Number of keys between restart points for delta encoding of keys.
  // This parameter can be changed dynamically.  Most clients should
  // leave this parameter alone.
  int block_restart_interval = 16;

  // 一个整数，表示SSTable文件的最大大小。当SSTable文件的大小超过此值时，LevelDB将创建一个新的SSTable文件。默认值为2MB。
  // Leveldb will write up to this amount of bytes to a file before
  // switching to a new one.
  // Most clients should leave this parameter alone.  However if your
  // filesystem is more efficient with larger files, you could
  // consider increasing the value.  The downside will be longer
  // compactions and hence longer latency/performance hiccups.
  // Another reason to increase this parameter might be when you are
  // initially populating a large database.
  size_t max_file_size = 2 * 1024 * 1024;

  // 一个枚举值，表示用于压缩SSTable中数据的压缩算法。默认情况下，LevelDB使用Snappy压缩算法。你可以选择其他压缩算法，例如Zlib、LZ4等。
  // Compress blocks using the specified compression algorithm.  This
  // parameter can be changed dynamically.
  //
  // Default: kSnappyCompression, which gives lightweight but fast
  // compression.
  //
  // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  //    ~200-500MB/s compression
  //    ~400-800MB/s decompression
  // Note that these speeds are significantly faster than most
  // persistent storage speeds, and therefore it is typically never
  // worth switching to kNoCompression.  Even if the input data is
  // incompressible, the kSnappyCompression implementation will
  // efficiently detect that and will switch to uncompressed mode.
  CompressionType compression = kSnappyCompression;

  // 一个整数，表示使用Zstd压缩算法时的压缩级别。此选项仅在使用Zstd压缩算法时有效。默认值为1。
  // Compression level for zstd.
  // Currently only the range [-5,22] is supported. Default is 1.
  int zstd_compression_level = 1;

  // 一个布尔值，表示是否重用WAL（写前日志）文件。在某些情况下，重用日志文件可以提高写性能。默认值为`false`。
  // EXPERIMENTAL: If true, append to existing MANIFEST and log files
  // when a database is opened.  This can significantly speed up open.
  //
  // Default: currently false, but may become true later.
  bool reuse_logs = false;

  // 一个`FilterPolicy`指针，表示用于生成Bloom过滤器的策略。
  // Bloom过滤器可以提高键查找的性能，因为它们可以在访问磁盘之前快速判断一个键是否存在于数据库中。
  // 默认值为`nullptr`，表示不使用Bloom过滤器。
  // 你可以使用`NewBloomFilterPolicy`函数创建一个Bloom过滤器策略，并将其设置为`Options`的`filter_policy`成员。
  // If non-null, use the specified filter policy to reduce disk reads.
  // Many applications will benefit from passing the result of
  // NewBloomFilterPolicy() here.
  const FilterPolicy* filter_policy = nullptr;
};

// Options that control read operations
struct LEVELDB_EXPORT ReadOptions {

  // 一个布尔值，表示是否在读取数据时验证校验和。这可以检测数据损坏，但可能会影响性能。默认值为`false`。
  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  bool verify_checksums = false;

  // 一个布尔值，表示是否在读取数据时填充缓存。默认值为`true`。
  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  bool fill_cache = true;

  // 一个`Snapshot`指针，表示用于读取数据的快照。
  // 默认值为`nullptr`，表示使用最新的数据。你可以使用`DB::GetSnapshot`方法获取一个快照，并将其设置为`ReadOptions`的`snapshot`成员。
  // If "snapshot" is non-null, read as of the supplied snapshot
  // (which must belong to the DB that is being read and which must
  // not have been released).  If "snapshot" is null, use an implicit
  // snapshot of the state at the beginning of this read operation.
  const Snapshot* snapshot = nullptr;
};

// Options that control write operations
struct LEVELDB_EXPORT WriteOptions {
  WriteOptions() = default;

  // 一个布尔值，表示是否在写入数据时同步刷新磁盘。这可以确保数据的持久性，但可能会影响性能。默认值为`false`。
  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  bool sync = false;
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
